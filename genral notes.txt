see, jab hum kisi folder ke andar folder banate hai and wo internal folder empty hota hai to git usse track nhi krta cuz wo empty hai 
and git files track krta hai wheather they are empty or not wo empty folder ko bydefault track nhi krta, but hume humara workflow
theek rakhne ke liye wo file chaiye bhi hoti hai isliye hum .gitkeep use krte hai to tell git isse bhi track karo

we also have git ignore file generator on internet which gives us bydefault all the files that should be in gitignore for that perticular project

we have created .env.sample so that in future i can know what were the things written in .env basically it is a copy of .env 

we are using module js and for module js we use import not required so we need to put this in package.json

now as we'll be adding multiple files in our project and we will need to restart our server often so for that we can either do manual start 
stop or we can use nodemon, nodemon basically restarts the server everytime the new file is saved
nodemon is a devdependency, now whats the diff in dependency and devdependency
dependency are those which are used in development phase as well as production phase, but devdependency are thode dependencies that
are not used in production, it is just used for development purpose  "npm i -D nodemon" command for installing nodemon devdependency

now our nodemon will reload the files in our index.js , but we need to define it like that
like we use 'npm run start' this command runs start from the package.json we will change it to dev and will define it
"dev": "nodemon src/index.js"  // when we will run "npm run dev"  nodemon will automatically run index.js 

thers also a slight issue with .env and module js that is we cannot use import 'dotenv/config' we need to use required for this one 
but we'll solve this issue later

now we have created multiple folders using mkdir command, and the folders that we created are contollers, db, models, middlewares, routes, utils
contollers is used for writting the contoller codes, db is used for writting the database connectivity, models is made for writting models of 
mongo in it, routes is made for writting apis in it /ig, /start ,/login etc, utils is for diff utilities like mailing, file uploading which we
will need multiple times

now we will also install prettier which is a devdependency and is mostly used for avoiding merge conflicts as it bydefaultly makes the code 
more organised. "npm i -D prettier", when the prettier is added we need to add some files (.prettierrc, .prettierignore) by our own to define what changes should be done 
automatically , .prettierignore is used to define which files are not meant to be changed like node modules, env files, distribution files etc

see, now we are working on mongodb atlas and to access mongodb through atlas we need 3 things necessarily i.e
1. ip address
2. correct id password
3. correct url

and professionally we never "allow access from anywhere", we give it a specific ip address to access the db
but for this project we are using allow all access i.e ip = 0.0.0.0/0  
now to connect with the database we also need a string and whenever we are given a string it never gives us the password
its like this "mongodb+srv://kumar:<password>@cluster0.mjkegme.mongodb.net/"
we need to replace password  with our password and also we do not need the last slash of our string

now we will define the port and URL in .env

we will also define the database name in constants.js file, we can also save this in our .env file dosent matter

now the databse connectivity is done by 2 methods 
1. either by writting the connection code directly in the index.js file
2. creating a seperate folder for db connection (this approach keeps code modular, neat and clean )

NOTE: while talking with db we can always have problems, to avoid that use try catch or promises(resolve, reject) and most of the times the 
problem while talking with db is that databse is in another continent, while talking with database it takes some time and to avoid that
always use async await

what is an iife (immideatly invoked function expression)? iife is just a normal function which executes as soon as it is invoked 
written as ()(), first bracket is for defining the function and second one is for calling it immideatly 
also theres a common error while using iife is if a previous statement is not having any semi colon it throws error to avoid that 
ppl generally use ;()() instead of ()()

this iife is used for the db connectivity

writting the port in `` allow for the inclusion of variables and expressions within a string using the ${expression} syntax. 

we use import{} for importing variables from diff files

we just dont have to add the process.env.mongodb_uri, we also need to give a / and database name after that

many times express app or listner is also initialised in index.js file and is written just below the connection of db
this is because what if the db is connected but the app is having some problem for that app.on is used 

now we will be heading towards the modular approach in db/index.js, here we have used process.exit(1)
process is an inbuilt function of node and as we know every operation is running on an process and here we
exit that process with an exit code 1 
(read about this later)

we can also store the mongoose.connect in a variable, mongoose allows us to store 
the respomces of the connection as mongoose returns an object

printing the connectionInstance it gives us the details of connection process
like it gives us our mongo db connection url if we use connectionInstance.connection.host

we can also write the require dotenv syntax but that disrupts the
consistency of our code, so below one is the correct approach for importing
require ('dotenv').config({path: './path'})

heres how we write the common js dotenv in mofule js 
import dotenv from "dotenv" 

dotenv.config({ 
    path: './env' 
})
and this is an experimental feature so for that we need to 
edit the scripts in package.json
"dev": "nodemon -r dotenv/config src/index.js"

now we will try running the program however we havent written any app yet
but jsut to check everything is file we will try running it by 
npm run dev

sometimes npm run dev may give us this error
"Error [ERR_UNSUPPORTED_DIR_IMPORT]: Directory import 
'D:\chai_aur_backend\src\db' is not supported resolving 
ES modules imported from D:\chai_aur_backend\src\index.js"

the above error is that it is not able to import the files
in db folder in our src/index.js, to solve it we will add 
index.js in import connectDB from "./db/index.js"
when error like this occours most of the time theres an issue
in import statement 
now we have another error 
Error [ERR_MODULE_NOT_FOUND]: Cannot find module 'D:\chai_aur_backend\src\constants'
this error tells us that is cannot find the constants.js
for this we will add constants.js in import statement of db/index.js

NOTE: if we chnage anything in environment variables we need to
manually restart the server cuz here nodemon cannot automatically restart it

now, what are the error we get when theres a database failure
this is the error we will get if theres an error while connecting the db
and it will be condename: 'AtlasError', below is the error
MONGODB connection error MongoServerError: bad auth : authentication failed

in such cases an error msg is thrown which we've written in try catch
so it is imp to write the specific error it will give us in the catch statement
so that we can understand where we used that language or sentence for error

till here we have connected to mongo atlas i.e database connectivity is done

now as we've written the async in db/index.js file, always remember
async gives us a promise in return once it is completed
and now we will be using that promise in src/index.js file
by writting .then() just after the database connection is done 
and for our safety we will also put a .catch() so that if
the db connection fails again we will know what and where the erorr is 
.then() and .catch() gives us a callback function in parameter

now we will start listening for our app as our databas connection is sucessfull

app.use is used when we want some middleware or cors(cross origin resource sharing)
settings

now we will install cookieparser and cors using npm 

NOTE: cors and cookie parser can be used once the app is created

majorly when we want to solve the issue of cors then we just add app.use(cors()) for configuration
and it solves our problem

cors also have some more functionality in it like corsoption which allows
us to allow the only urls which will interact with our backend server
or from which urls we will recive our requests

we also have an functionality of allowing our req origin , i.e from 
where can we recive the req on our server
so for that we need to create an object inside the cors() method 
and we need to define the cors_origin there we can also define it in our
.env file, many times ppl allow access from all origins which is not a good
practice "CORS_ORIGIN = *" this should not be done but for now we are allowing it
we will also allow credentials

now we also need to cofigure our server what kind of requests will it accept
will it accept json req or form req and we will also limit how many req one can send etc
app.use(express.json({limit: "16kb"})) 
the above statement shows it will accept only json format and upto 16kb

in prev versions of express it didnt allow to directly work with json, we were supposed
to use body parser but now we dont need that 

now we also need to configure our server to accept request from URL 
now URL is a bit diff from json, cuz when a url sends req it has many special characters
in it like +, %20, =, %20 respresents space given in url/search etc and this is all because of URL encoder which every browser has
now we need to configure our server so that these =,+% such things are not taken in input

extended keyword, this keyword allows us to give an object inside another object
app.use(express.urlencoded({
    extended: true, limit: "16kb"
}))
although just by writting express.urlencoded we can handel our url but for further functionality we 
are using extended so that we can have another objects in it

now if we are willing to keep some files or images or anything on the server temp 
we can do it by using app.use(express.static("public")) this public is a folder name
and anything that is to be kept temporarily will be kept in public folder

so there are these 3 major configureations in our app
1. express.json,
2. express.urlencoded
3. express.static

now we have this cookie parser, this is used to by server only to keep/remove the cookies 
on the users browser securly 

later on cookie parser is used which is used by server to store
and access cookies stored on users browser

what is middleware:- basically jab hum koi bhi req send krenge apne server ko
wo ek responce dega, ab wo responce directly sabko na dekar pehle wo kuch cheeje 
check karega ki ye req authetic hai ya nhi, isse responce dena chaiye ya nhi
ye sab kaam hota hai middleware kaam
eg: check if user is logged in before able to search 
and there can be multiple middlewares and there is a sequence of adding middlewares

sirf req, res nhi hota, there are total of 4 parameters error, request, responce, next
if we are using next then we are for sure using middleware cuz next is just a flag
and har ek middleware ke baad next use krna padta hai so that agla middleware check ho sake

now we will be making a utility out of all these db connectivities, cuz it will be 
repeated n number of times so that if we make it a wrapper function in utility
then everytime when we need to connect to db we will use the function

what is asynchandler: It is a utility which ensures that any errors thrown 
within asynchronous functions are caught and forwarded to the error handling middleware\

what is a higher order function, such function which can take other
functions as the input eg: asynchandler

in our code we have made the asynchandler as a wrapper class

in asynchandler we have used a try catch so that it can handel errors
if the middleware gets an error , in catch part we have returned
an error code i.e 500, 404 etc furhter that we have used .json 
so that we will get error code as well as we can help the frontend dev by
raising a success flag and have also displayed the error message

now we have made the same code just by using the promises 

now we will make a new file in utils which will have the standardised
code for api errors and later on we will also create standard 
api responce file so that whenever we are sending any api error or respoce
then it will go in the described format

we will also standardise the api response format 
by making a filke apiresponse

// Ill suggest ek bar GPT karke apiresponse nd api error padhlena

now we will create the models for user and videos for our youtube application
(when mongo db generates the object id for every item then that id is stored in 
BSON data and not JSON data)

https://app.eraser.io/workspace/YtPqZ1VogxGy1jzIDkzj // this is the model
respresentation of our yt app

here we will be storing the coverimage and avatar on a diff third party
service which will give us the link and we will directly store the link 

if we want to make our database more serachable or we will be using our db
for more searching purpose then always do index: true for that field,
remember, do not do the indexing for every entity it slows down db performance
and it also optimizes the db eg: username: {type: string, required: true, index: true} although it makes 
db intense i.e takes more disk space, INSERT, UPDATE, and DELETE are all 
slowed by indexes, but UPDATE is speed up if the WHERE condition has 
an indexed field. Since the indexes must be modified with each process,
INSERT, UPDATE, and DELETE become slower

mongo db allows us to store small media files in it but its not a good practice
and makes the database heavy

for the duration in video model we'll get the duration of vieos from our 
hosting platform url cuz as we upload any media in it it also gives us the
time duration of that media its common in every cloud service
here we are using cloudnary

watchhistory is the most complex thing in this project and
for this we will be using mongoose-aggregate-paginate-v2
this npm package allows us to write the aggregae querries in mongo
to insatll this package:
npm i mongoose-aggregate-paginate-v2
it is the true power of mongodb which is most widely used in indutry
and production ready applications

first import mongooseAggregatePaginate from "mongoose-aggregate-paginate-v2";
note: we have to use this aggregate querries before exporting the model

we can also use middlewares in mongoose, like pre, post, save etc
pre: do something just before entering the data, 
post: do something just after entering the data

and mongoose also allows us to write plugins

as this aggreagte querry feature in mongo db has came late compared
to other languages, (for more indept use reffer doccumentation, its easy
to understand ) we use these using plugins and this mongoose 
aggregation pipeline will take our project to advanced level
(u can put this in ur resume to let the recruiter know u've worked on this)

to use the mongoose Aggregate pipeline: 
videoSchema.plugin(mongooseAggregatePaginate)

now we will be installing bcrypt (not bcriptjs)
bcrypt is a library that helps u to hash ur password 

we'll be also installing JWT (json web token)
this one is used for making tokens

now we'll import bcrypt and JWT
but, we cannot use these two directly, we need to use them using
mongoose hooks (middleware in mongoose)
we'll use pre hooks which works just before saving the data as it 
is a middleware, and in most of the professional codes this pre hook for
encryption is written in model file

now we will use pre hook in users.models.js which will accept the operation name
and a callback, (operation is save)
NOTE: we do not have (this) in callback function, so in most of the cases 
we have function written in pre hook 

and here we have made the function as async function cuz it may take time 
to respond also as 'pre' is a middleware hook it needs 
a next flag

then we'll encrypt the password using this.password and a method of bcrypt
bcrypt.hash, which accepts the field that is to be encrypted and the
rounds of encryption to be performed on it ,so here we have taken 10

now we have created a problem here, that is this encrypt will be triggerd
whenever save is clicked so if anyone changes supose avatar and hits save
our pre hook will detect it and again save the password ifever it was not 
given(will take the prev value written in memory) 
so to avoid this we'll make code such that it will only trigger the encrypt 
pre hook only when the password field is updated

we'll also be creating custom methods to check if the provided password is 
correct or not, for that we will compare the password provided by the user 
and our encrypted password from database using bcrypt.compare
and this method returns bool value, and as we know this is cryptography
it need computational power which may take time to respond
so for that we will use async await 
and as this is a method just like pre hook it need a function for input
we've given password as input and then it returns the bool value

talking about JWT
NOTE: JWT is a bearertoken which means that jo usse beare karta hai
usse sahi maan lete hai hum, i.e jo bhi mujhe ye token bhejega me usse data
bhej dunga more of a key (generally asked in interviews)

we need to write these access token secret, access token expiry in .env file
cuz these are imp Atleast access token secret is imp and cannot be leaked
although we can write anything in place of secret token but Since
we are making a production grade application so just used a random key
(key is bought from jwt.io)
we've given 1d time for token to expire 
generally refresh token expire is much more time than token expire

we'll be using both secissions and cookies and we'll not be storing access 
toke secret

we can also create a function to generate access tokens and refresh tokens

sign method in jwt generates token

we are using both session and cookies for more security and we our access token 
secret will not be stored in databse whereas out refresh token expiry will be 
stored in database

basically both refresh and access tokens are same just they have different usage

now we will give the 


